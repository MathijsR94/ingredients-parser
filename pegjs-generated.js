module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = /^[\n]/,
        peg$c1 = { type: "class", value: "[\\n]", description: "[\\n]" },
        peg$c2 = function(amount, container, unit, preposition, ingredient) {
            var result = {
              amount: amount,
              container: container,
              ingredient: ingredient,
              unit: unit,
            };

            for(var i in result) {
              if(result[i] === null || result[i] === undefined) {
                delete result[i];
              }
            }

            return result;
          },
        peg$c3 = function(amount, unit) {
            return { amount: amount, unit: unit };
          },
        peg$c4 = "(",
        peg$c5 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c6 = "{",
        peg$c7 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c8 = "[",
        peg$c9 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c10 = "<",
        peg$c11 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c12 = ")",
        peg$c13 = { type: "literal", value: ")", description: "\")\"" },
        peg$c14 = "}",
        peg$c15 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c16 = "]",
        peg$c17 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c18 = ">",
        peg$c19 = { type: "literal", value: ">", description: "\">\"" },
        peg$c20 = " ",
        peg$c21 = { type: "literal", value: " ", description: "\" \"" },
        peg$c22 = /^[\t]/,
        peg$c23 = { type: "class", value: "[\\t]", description: "[\\t]" },
        peg$c24 = "of",
        peg$c25 = { type: "literal", value: "of", description: "\"of\"" },
        peg$c26 = "an",
        peg$c27 = { type: "literal", value: "an", description: "\"an\"" },
        peg$c28 = "a",
        peg$c29 = { type: "literal", value: "a", description: "\"a\"" },
        peg$c30 = { type: "any", description: "any character" },
        peg$c31 = /^[,]/,
        peg$c32 = { type: "class", value: "[,]", description: "[,]" },
        peg$c33 = function(letters) { return letters.join(''); },
        peg$c34 = /^[.]/,
        peg$c35 = { type: "class", value: "[.]", description: "[.]" },
        peg$c36 = "one",
        peg$c37 = { type: "literal", value: "one", description: "\"one\"" },
        peg$c38 = "two",
        peg$c39 = { type: "literal", value: "two", description: "\"two\"" },
        peg$c40 = "three",
        peg$c41 = { type: "literal", value: "three", description: "\"three\"" },
        peg$c42 = "four",
        peg$c43 = { type: "literal", value: "four", description: "\"four\"" },
        peg$c44 = "five",
        peg$c45 = { type: "literal", value: "five", description: "\"five\"" },
        peg$c46 = "six",
        peg$c47 = { type: "literal", value: "six", description: "\"six\"" },
        peg$c48 = "seven",
        peg$c49 = { type: "literal", value: "seven", description: "\"seven\"" },
        peg$c50 = "eight",
        peg$c51 = { type: "literal", value: "eight", description: "\"eight\"" },
        peg$c52 = "nine",
        peg$c53 = { type: "literal", value: "nine", description: "\"nine\"" },
        peg$c54 = "ten",
        peg$c55 = { type: "literal", value: "ten", description: "\"ten\"" },
        peg$c56 = "eleven",
        peg$c57 = { type: "literal", value: "eleven", description: "\"eleven\"" },
        peg$c58 = "twelve",
        peg$c59 = { type: "literal", value: "twelve", description: "\"twelve\"" },
        peg$c60 = "couple",
        peg$c61 = { type: "literal", value: "couple", description: "\"couple\"" },
        peg$c62 = "few",
        peg$c63 = { type: "literal", value: "few", description: "\"few\"" },
        peg$c64 = /^[\/]/,
        peg$c65 = { type: "class", value: "[/]", description: "[/]" },
        peg$c66 = /^[0-9]/,
        peg$c67 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c68 = function(digits) { return digits.join(''); },
        peg$c69 = /^[a-zA-Z]/,
        peg$c70 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c71 = "cups",
        peg$c72 = { type: "literal", value: "cups", description: "\"cups\"" },
        peg$c73 = "cup",
        peg$c74 = { type: "literal", value: "cup", description: "\"cup\"" },
        peg$c75 = "c.",
        peg$c76 = { type: "literal", value: "c.", description: "\"c.\"" },
        peg$c77 = "c",
        peg$c78 = { type: "literal", value: "c", description: "\"c\"" },
        peg$c79 = "fluid",
        peg$c80 = { type: "literal", value: "fluid", description: "\"fluid\"" },
        peg$c81 = "fl",
        peg$c82 = { type: "literal", value: "fl", description: "\"fl\"" },
        peg$c83 = ".",
        peg$c84 = { type: "literal", value: ".", description: "\".\"" },
        peg$c85 = "gallons",
        peg$c86 = { type: "literal", value: "gallons", description: "\"gallons\"" },
        peg$c87 = "gallon",
        peg$c88 = { type: "literal", value: "gallon", description: "\"gallon\"" },
        peg$c89 = "gal.",
        peg$c90 = { type: "literal", value: "gal.", description: "\"gal.\"" },
        peg$c91 = "gal",
        peg$c92 = { type: "literal", value: "gal", description: "\"gal\"" },
        peg$c93 = "ounces",
        peg$c94 = { type: "literal", value: "ounces", description: "\"ounces\"" },
        peg$c95 = "ounce",
        peg$c96 = { type: "literal", value: "ounce", description: "\"ounce\"" },
        peg$c97 = "oz.",
        peg$c98 = { type: "literal", value: "oz.", description: "\"oz.\"" },
        peg$c99 = "oz",
        peg$c100 = { type: "literal", value: "oz", description: "\"oz\"" },
        peg$c101 = "pints",
        peg$c102 = { type: "literal", value: "pints", description: "\"pints\"" },
        peg$c103 = "pint",
        peg$c104 = { type: "literal", value: "pint", description: "\"pint\"" },
        peg$c105 = "pt.",
        peg$c106 = { type: "literal", value: "pt.", description: "\"pt.\"" },
        peg$c107 = "pt",
        peg$c108 = { type: "literal", value: "pt", description: "\"pt\"" },
        peg$c109 = "pounds",
        peg$c110 = { type: "literal", value: "pounds", description: "\"pounds\"" },
        peg$c111 = "pound",
        peg$c112 = { type: "literal", value: "pound", description: "\"pound\"" },
        peg$c113 = "lbs.",
        peg$c114 = { type: "literal", value: "lbs.", description: "\"lbs.\"" },
        peg$c115 = "lbs",
        peg$c116 = { type: "literal", value: "lbs", description: "\"lbs\"" },
        peg$c117 = "lb.",
        peg$c118 = { type: "literal", value: "lb.", description: "\"lb.\"" },
        peg$c119 = "lb",
        peg$c120 = { type: "literal", value: "lb", description: "\"lb\"" },
        peg$c121 = "quarts",
        peg$c122 = { type: "literal", value: "quarts", description: "\"quarts\"" },
        peg$c123 = "quart",
        peg$c124 = { type: "literal", value: "quart", description: "\"quart\"" },
        peg$c125 = "qts.",
        peg$c126 = { type: "literal", value: "qts.", description: "\"qts.\"" },
        peg$c127 = "qts",
        peg$c128 = { type: "literal", value: "qts", description: "\"qts\"" },
        peg$c129 = "qt.",
        peg$c130 = { type: "literal", value: "qt.", description: "\"qt.\"" },
        peg$c131 = "qt",
        peg$c132 = { type: "literal", value: "qt", description: "\"qt\"" },
        peg$c133 = "tablespoons",
        peg$c134 = { type: "literal", value: "tablespoons", description: "\"tablespoons\"" },
        peg$c135 = "tablespoon",
        peg$c136 = { type: "literal", value: "tablespoon", description: "\"tablespoon\"" },
        peg$c137 = "tbsp.",
        peg$c138 = { type: "literal", value: "tbsp.", description: "\"tbsp.\"" },
        peg$c139 = "tbsp",
        peg$c140 = { type: "literal", value: "tbsp", description: "\"tbsp\"" },
        peg$c141 = "tbs.",
        peg$c142 = { type: "literal", value: "tbs.", description: "\"tbs.\"" },
        peg$c143 = "tbs",
        peg$c144 = { type: "literal", value: "tbs", description: "\"tbs\"" },
        peg$c145 = "T.",
        peg$c146 = { type: "literal", value: "T.", description: "\"T.\"" },
        peg$c147 = "T",
        peg$c148 = { type: "literal", value: "T", description: "\"T\"" },
        peg$c149 = "teaspoons",
        peg$c150 = { type: "literal", value: "teaspoons", description: "\"teaspoons\"" },
        peg$c151 = "teaspoon",
        peg$c152 = { type: "literal", value: "teaspoon", description: "\"teaspoon\"" },
        peg$c153 = "tsp.",
        peg$c154 = { type: "literal", value: "tsp.", description: "\"tsp.\"" },
        peg$c155 = "tsp",
        peg$c156 = { type: "literal", value: "tsp", description: "\"tsp\"" },
        peg$c157 = "t.",
        peg$c158 = { type: "literal", value: "t.", description: "\"t.\"" },
        peg$c159 = "t",
        peg$c160 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c161 = "grams",
        peg$c162 = { type: "literal", value: "grams", description: "\"grams\"" },
        peg$c163 = "gram",
        peg$c164 = { type: "literal", value: "gram", description: "\"gram\"" },
        peg$c165 = "gr.",
        peg$c166 = { type: "literal", value: "gr.", description: "\"gr.\"" },
        peg$c167 = "gr",
        peg$c168 = { type: "literal", value: "gr", description: "\"gr\"" },
        peg$c169 = "g.",
        peg$c170 = { type: "literal", value: "g.", description: "\"g.\"" },
        peg$c171 = "g",
        peg$c172 = { type: "literal", value: "g", description: "\"g\"" },
        peg$c173 = "kilograms",
        peg$c174 = { type: "literal", value: "kilograms", description: "\"kilograms\"" },
        peg$c175 = "kilogram",
        peg$c176 = { type: "literal", value: "kilogram", description: "\"kilogram\"" },
        peg$c177 = "kg.",
        peg$c178 = { type: "literal", value: "kg.", description: "\"kg.\"" },
        peg$c179 = "kg",
        peg$c180 = { type: "literal", value: "kg", description: "\"kg\"" },
        peg$c181 = "liters",
        peg$c182 = { type: "literal", value: "liters", description: "\"liters\"" },
        peg$c183 = "liter",
        peg$c184 = { type: "literal", value: "liter", description: "\"liter\"" },
        peg$c185 = "l.",
        peg$c186 = { type: "literal", value: "l.", description: "\"l.\"" },
        peg$c187 = "l",
        peg$c188 = { type: "literal", value: "l", description: "\"l\"" },
        peg$c189 = "milligrams",
        peg$c190 = { type: "literal", value: "milligrams", description: "\"milligrams\"" },
        peg$c191 = "milligram",
        peg$c192 = { type: "literal", value: "milligram", description: "\"milligram\"" },
        peg$c193 = "mg.",
        peg$c194 = { type: "literal", value: "mg.", description: "\"mg.\"" },
        peg$c195 = "mg",
        peg$c196 = { type: "literal", value: "mg", description: "\"mg\"" },
        peg$c197 = "milliliters",
        peg$c198 = { type: "literal", value: "milliliters", description: "\"milliliters\"" },
        peg$c199 = "milliliter",
        peg$c200 = { type: "literal", value: "milliliter", description: "\"milliliter\"" },
        peg$c201 = "ml.",
        peg$c202 = { type: "literal", value: "ml.", description: "\"ml.\"" },
        peg$c203 = "ml",
        peg$c204 = { type: "literal", value: "ml", description: "\"ml\"" },
        peg$c205 = "centiliters",
        peg$c206 = { type: "literal", value: "centiliters", description: "\"centiliters\"" },
        peg$c207 = "centiliter",
        peg$c208 = { type: "literal", value: "centiliter", description: "\"centiliter\"" },
        peg$c209 = "cl.",
        peg$c210 = { type: "literal", value: "cl.", description: "\"cl.\"" },
        peg$c211 = "cl",
        peg$c212 = { type: "literal", value: "cl", description: "\"cl\"" },
        peg$c213 = "deciliters",
        peg$c214 = { type: "literal", value: "deciliters", description: "\"deciliters\"" },
        peg$c215 = "deciliter",
        peg$c216 = { type: "literal", value: "deciliter", description: "\"deciliter\"" },
        peg$c217 = "dl.",
        peg$c218 = { type: "literal", value: "dl.", description: "\"dl.\"" },
        peg$c219 = "dl",
        peg$c220 = { type: "literal", value: "dl", description: "\"dl\"" },
        peg$c221 = "bags",
        peg$c222 = { type: "literal", value: "bags", description: "\"bags\"" },
        peg$c223 = "bag",
        peg$c224 = { type: "literal", value: "bag", description: "\"bag\"" },
        peg$c225 = "bars",
        peg$c226 = { type: "literal", value: "bars", description: "\"bars\"" },
        peg$c227 = "bar",
        peg$c228 = { type: "literal", value: "bar", description: "\"bar\"" },
        peg$c229 = "bottles",
        peg$c230 = { type: "literal", value: "bottles", description: "\"bottles\"" },
        peg$c231 = "bottle",
        peg$c232 = { type: "literal", value: "bottle", description: "\"bottle\"" },
        peg$c233 = "bowls",
        peg$c234 = { type: "literal", value: "bowls", description: "\"bowls\"" },
        peg$c235 = "bowl",
        peg$c236 = { type: "literal", value: "bowl", description: "\"bowl\"" },
        peg$c237 = "breasts",
        peg$c238 = { type: "literal", value: "breasts", description: "\"breasts\"" },
        peg$c239 = "breast",
        peg$c240 = { type: "literal", value: "breast", description: "\"breast\"" },
        peg$c241 = "bulbs",
        peg$c242 = { type: "literal", value: "bulbs", description: "\"bulbs\"" },
        peg$c243 = "bulb",
        peg$c244 = { type: "literal", value: "bulb", description: "\"bulb\"" },
        peg$c245 = "buns",
        peg$c246 = { type: "literal", value: "buns", description: "\"buns\"" },
        peg$c247 = "bun",
        peg$c248 = { type: "literal", value: "bun", description: "\"bun\"" },
        peg$c249 = "bunches",
        peg$c250 = { type: "literal", value: "bunches", description: "\"bunches\"" },
        peg$c251 = "bunch",
        peg$c252 = { type: "literal", value: "bunch", description: "\"bunch\"" },
        peg$c253 = "cans",
        peg$c254 = { type: "literal", value: "cans", description: "\"cans\"" },
        peg$c255 = "can",
        peg$c256 = { type: "literal", value: "can", description: "\"can\"" },
        peg$c257 = "cartons",
        peg$c258 = { type: "literal", value: "cartons", description: "\"cartons\"" },
        peg$c259 = "carton",
        peg$c260 = { type: "literal", value: "carton", description: "\"carton\"" },
        peg$c261 = "cones",
        peg$c262 = { type: "literal", value: "cones", description: "\"cones\"" },
        peg$c263 = "cone",
        peg$c264 = { type: "literal", value: "cone", description: "\"cone\"" },
        peg$c265 = "cloves",
        peg$c266 = { type: "literal", value: "cloves", description: "\"cloves\"" },
        peg$c267 = "clove",
        peg$c268 = { type: "literal", value: "clove", description: "\"clove\"" },
        peg$c269 = "containers",
        peg$c270 = { type: "literal", value: "containers", description: "\"containers\"" },
        peg$c271 = "container",
        peg$c272 = { type: "literal", value: "container", description: "\"container\"" },
        peg$c273 = "larges",
        peg$c274 = { type: "literal", value: "larges", description: "\"larges\"" },
        peg$c275 = "large",
        peg$c276 = { type: "literal", value: "large", description: "\"large\"" },
        peg$c277 = "mediums",
        peg$c278 = { type: "literal", value: "mediums", description: "\"mediums\"" },
        peg$c279 = "medium",
        peg$c280 = { type: "literal", value: "medium", description: "\"medium\"" },
        peg$c281 = "minis",
        peg$c282 = { type: "literal", value: "minis", description: "\"minis\"" },
        peg$c283 = "mini",
        peg$c284 = { type: "literal", value: "mini", description: "\"mini\"" },
        peg$c285 = "smalls",
        peg$c286 = { type: "literal", value: "smalls", description: "\"smalls\"" },
        peg$c287 = "small",
        peg$c288 = { type: "literal", value: "small", description: "\"small\"" },
        peg$c289 = "cubes",
        peg$c290 = { type: "literal", value: "cubes", description: "\"cubes\"" },
        peg$c291 = "cube",
        peg$c292 = { type: "literal", value: "cube", description: "\"cube\"" },
        peg$c293 = "fillets",
        peg$c294 = { type: "literal", value: "fillets", description: "\"fillets\"" },
        peg$c295 = "fillet",
        peg$c296 = { type: "literal", value: "fillet", description: "\"fillet\"" },
        peg$c297 = "heads",
        peg$c298 = { type: "literal", value: "heads", description: "\"heads\"" },
        peg$c299 = "head",
        peg$c300 = { type: "literal", value: "head", description: "\"head\"" },
        peg$c301 = "jars",
        peg$c302 = { type: "literal", value: "jars", description: "\"jars\"" },
        peg$c303 = "jar",
        peg$c304 = { type: "literal", value: "jar", description: "\"jar\"" },
        peg$c305 = "packages",
        peg$c306 = { type: "literal", value: "packages", description: "\"packages\"" },
        peg$c307 = "package",
        peg$c308 = { type: "literal", value: "package", description: "\"package\"" },
        peg$c309 = "packets",
        peg$c310 = { type: "literal", value: "packets", description: "\"packets\"" },
        peg$c311 = "packet",
        peg$c312 = { type: "literal", value: "packet", description: "\"packet\"" },
        peg$c313 = "packs",
        peg$c314 = { type: "literal", value: "packs", description: "\"packs\"" },
        peg$c315 = "pack",
        peg$c316 = { type: "literal", value: "pack", description: "\"pack\"" },
        peg$c317 = "patties",
        peg$c318 = { type: "literal", value: "patties", description: "\"patties\"" },
        peg$c319 = "patty",
        peg$c320 = { type: "literal", value: "patty", description: "\"patty\"" },
        peg$c321 = "pieces",
        peg$c322 = { type: "literal", value: "pieces", description: "\"pieces\"" },
        peg$c323 = "piece",
        peg$c324 = { type: "literal", value: "piece", description: "\"piece\"" },
        peg$c325 = "portions",
        peg$c326 = { type: "literal", value: "portions", description: "\"portions\"" },
        peg$c327 = "portion",
        peg$c328 = { type: "literal", value: "portion", description: "\"portion\"" },
        peg$c329 = "servingses",
        peg$c330 = { type: "literal", value: "servingses", description: "\"servingses\"" },
        peg$c331 = "servings",
        peg$c332 = { type: "literal", value: "servings", description: "\"servings\"" },
        peg$c333 = "rolls",
        peg$c334 = { type: "literal", value: "rolls", description: "\"rolls\"" },
        peg$c335 = "roll",
        peg$c336 = { type: "literal", value: "roll", description: "\"roll\"" },
        peg$c337 = "slices",
        peg$c338 = { type: "literal", value: "slices", description: "\"slices\"" },
        peg$c339 = "slice",
        peg$c340 = { type: "literal", value: "slice", description: "\"slice\"" },
        peg$c341 = "handfuls",
        peg$c342 = { type: "literal", value: "handfuls", description: "\"handfuls\"" },
        peg$c343 = "handful",
        peg$c344 = { type: "literal", value: "handful", description: "\"handful\"" },
        peg$c345 = "pinches",
        peg$c346 = { type: "literal", value: "pinches", description: "\"pinches\"" },
        peg$c347 = "pinch",
        peg$c348 = { type: "literal", value: "pinch", description: "\"pinch\"" },
        peg$c349 = "touches",
        peg$c350 = { type: "literal", value: "touches", description: "\"touches\"" },
        peg$c351 = "touch",
        peg$c352 = { type: "literal", value: "touch", description: "\"touch\"" },
        peg$c353 = "envelopes",
        peg$c354 = { type: "literal", value: "envelopes", description: "\"envelopes\"" },
        peg$c355 = "envelope",
        peg$c356 = { type: "literal", value: "envelope", description: "\"envelope\"" },
        peg$c357 = "sprigs",
        peg$c358 = { type: "literal", value: "sprigs", description: "\"sprigs\"" },
        peg$c359 = "sprig",
        peg$c360 = { type: "literal", value: "sprig", description: "\"sprig\"" },
        peg$c361 = "sheets",
        peg$c362 = { type: "literal", value: "sheets", description: "\"sheets\"" },
        peg$c363 = "sheet",
        peg$c364 = { type: "literal", value: "sheet", description: "\"sheet\"" },
        peg$c365 = "splashes",
        peg$c366 = { type: "literal", value: "splashes", description: "\"splashes\"" },
        peg$c367 = "splash",
        peg$c368 = { type: "literal", value: "splash", description: "\"splash\"" },
        peg$c369 = "dashes",
        peg$c370 = { type: "literal", value: "dashes", description: "\"dashes\"" },
        peg$c371 = "dash",
        peg$c372 = { type: "literal", value: "dash", description: "\"dash\"" },
        peg$c373 = "units",
        peg$c374 = { type: "literal", value: "units", description: "\"units\"" },
        peg$c375 = "unit",
        peg$c376 = { type: "literal", value: "unit", description: "\"unit\"" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parseingredient_full();

      return s0;
    }

    function peg$parseingredient_full() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseamount();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsews();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecontainer();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseunit();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsews();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsews();
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepreposition();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsews();
                  if (s8 !== peg$FAILED) {
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parsews();
                    }
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsephrase();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      if (peg$c0.test(input.charAt(peg$currPos))) {
                        s9 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c1); }
                      }
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c2(s1, s3, s4, s6, s8);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseamount() {
      var s0;

      s0 = peg$parsefraction();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemixed_number();
        if (s0 === peg$FAILED) {
          s0 = peg$parseword_number();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefloat();
            if (s0 === peg$FAILED) {
              s0 = peg$parseinteger();
              if (s0 === peg$FAILED) {
                s0 = peg$parsefew();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecouple();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecontainer() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsecontainer_wrapper_start();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsews();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseamount();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsews();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseunit();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsews();
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecontainer_wrapper_end();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c3(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontainer_wrapper_start() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c4;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s0 = peg$c6;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s0 = peg$c8;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 60) {
              s0 = peg$c10;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecontainer_wrapper_end() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c12;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s0 = peg$c14;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s0 = peg$c16;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s0 = peg$c18;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsews() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c20;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c22.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
      }

      return s0;
    }

    function peg$parsepreposition() {
      var s0;

      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }

      return s0;
    }

    function peg$parsearticle() {
      var s0;

      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c28) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
      }

      return s0;
    }

    function peg$parsespace() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c20;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }

      return s0;
    }

    function peg$parsephrase() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsepunctuation() {
      var s0;

      if (peg$c31.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseletter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseletter();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c33(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefloat() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseinteger();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (peg$c34.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseinteger();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsemixed_number() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseinteger();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsefraction();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseword_number() {
      var s0;

      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c36) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c38) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c40) {
            s0 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c42) {
              s0 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c44) {
                s0 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c45); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c46) {
                  s0 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c47); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c48) {
                    s0 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c49); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c50) {
                      s0 = input.substr(peg$currPos, 5);
                      peg$currPos += 5;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c51); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c52) {
                        s0 = input.substr(peg$currPos, 4);
                        peg$currPos += 4;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c53); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {
                          s0 = input.substr(peg$currPos, 3);
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c55); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c56) {
                            s0 = input.substr(peg$currPos, 6);
                            peg$currPos += 6;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c57); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c58) {
                              s0 = input.substr(peg$currPos, 6);
                              peg$currPos += 6;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c59); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecouple() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsearticle();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c60) {
            s4 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c61); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsefew() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsearticle();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c62) {
            s4 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsefraction() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseinteger();
      if (s2 !== peg$FAILED) {
        if (peg$c64.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseinteger();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c66.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c66.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c67); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c68(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseletter() {
      var s0;

      if (peg$c69.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }

      return s0;
    }

    function peg$parseunit() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseenglish_unit();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseletter();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsemetric_unit();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseletter();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseimprecise_unit();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parseletter();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = void 0;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseenglish_unit() {
      var s0;

      s0 = peg$parsecup();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefluid_ounce();
        if (s0 === peg$FAILED) {
          s0 = peg$parsegallon();
          if (s0 === peg$FAILED) {
            s0 = peg$parseounce();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepint();
              if (s0 === peg$FAILED) {
                s0 = peg$parsepound();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsequart();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsetablespoon();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseteaspoon();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecup() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c71) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c73) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c75) {
            s0 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c76); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c77) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c78); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefluid_ounce() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefluid();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseounce();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefluid() {
      var s0, s1, s2;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c79) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c81) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c82); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s2 = peg$c83;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsegallon() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c85) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c87) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c89) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c90); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c91) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c92); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseounce() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c93) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c95) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c96); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c97) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c98); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c99) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c100); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepint() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c101) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c103) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c104); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c105) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c106); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c107) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c108); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepound() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c109) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c111) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c113) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c114); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c115) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c116); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c117) {
                s0 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c118); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c119) {
                  s0 = input.substr(peg$currPos, 2);
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c120); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsequart() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c121) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c123) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c124); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c125) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c126); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c127) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c128); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c129) {
                s0 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c130); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c131) {
                  s0 = input.substr(peg$currPos, 2);
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c132); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetablespoon() {
      var s0;

      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c133) {
        s0 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c135) {
          s0 = input.substr(peg$currPos, 10);
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c136); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c137) {
            s0 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c138); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c139) {
              s0 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c140); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c141) {
                s0 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c142); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c143) {
                  s0 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c144); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c145) {
                    s0 = peg$c145;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c146); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 84) {
                      s0 = peg$c147;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c148); }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseteaspoon() {
      var s0;

      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c149) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c150); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c151) {
          s0 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c152); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c153) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c154); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c155) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c156); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c157) {
                s0 = peg$c157;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c158); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 116) {
                  s0 = peg$c159;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c160); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemetric_unit() {
      var s0;

      s0 = peg$parsekilogram();
      if (s0 === peg$FAILED) {
        s0 = peg$parsegram();
        if (s0 === peg$FAILED) {
          s0 = peg$parsemilligram();
          if (s0 === peg$FAILED) {
            s0 = peg$parseliter();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedeciliter();
              if (s0 === peg$FAILED) {
                s0 = peg$parsecentiliter();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemilliliter();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegram() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c161) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c162); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c163) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c164); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c165) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c166); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c167) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c168); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c169) {
                s0 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c170); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 1).toLowerCase() === peg$c171) {
                  s0 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c172); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekilogram() {
      var s0;

      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c173) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c174); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c175) {
          s0 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c176); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c177) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c178); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c179) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c180); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseliter() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c181) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c182); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c183) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c184); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c185) {
            s0 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c186); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c187) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c188); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemilligram() {
      var s0;

      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c189) {
        s0 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c190); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c191) {
          s0 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c192); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c193) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c194); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c195) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c196); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemilliliter() {
      var s0;

      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c197) {
        s0 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c198); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c199) {
          s0 = input.substr(peg$currPos, 10);
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c200); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c201) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c202); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c203) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c204); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecentiliter() {
      var s0;

      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c205) {
        s0 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c206); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c207) {
          s0 = input.substr(peg$currPos, 10);
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c208); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c209) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c210); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c211) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c212); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedeciliter() {
      var s0;

      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c213) {
        s0 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c214); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c215) {
          s0 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c216); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c217) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c218); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c219) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c220); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseimprecise_unit() {
      var s0;

      s0 = peg$parsebag();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebar();
        if (s0 === peg$FAILED) {
          s0 = peg$parsebottle();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebowl();
            if (s0 === peg$FAILED) {
              s0 = peg$parsebreast();
              if (s0 === peg$FAILED) {
                s0 = peg$parsebulb();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsebun();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsebunch();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsecan();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsecarton();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsecone();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseclove();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsecontainer();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parselarge();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsemedium();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsemini();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsesmall();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsecube();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsefillet();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsehead();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsejar();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsepackage();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsepacket();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsepack();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsepatty();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsepiece();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseportion();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseservings();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseroll();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseslice();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsehandful();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsepinch();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parsetouch();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseslice();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseenvelope();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsesprig();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parsesheet();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parsedash();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parsesplash();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseunit_();
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsebag() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c221) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c222); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c223) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c224); }
        }
      }

      return s0;
    }

    function peg$parsebar() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c225) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c226); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c227) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
      }

      return s0;
    }

    function peg$parsebottle() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c229) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c230); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c231) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c232); }
        }
      }

      return s0;
    }

    function peg$parsebowl() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c233) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c234); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c235) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c236); }
        }
      }

      return s0;
    }

    function peg$parsebreast() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c237) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c238); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c239) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c240); }
        }
      }

      return s0;
    }

    function peg$parsebulb() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c241) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c242); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c243) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c244); }
        }
      }

      return s0;
    }

    function peg$parsebun() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c245) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c246); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c247) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c248); }
        }
      }

      return s0;
    }

    function peg$parsebunch() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c249) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c250); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c251) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c252); }
        }
      }

      return s0;
    }

    function peg$parsecan() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c253) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c255) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c256); }
        }
      }

      return s0;
    }

    function peg$parsecarton() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c257) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c258); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c259) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c260); }
        }
      }

      return s0;
    }

    function peg$parsecone() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c261) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c262); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c263) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c264); }
        }
      }

      return s0;
    }

    function peg$parseclove() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c265) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c266); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c267) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c268); }
        }
      }

      return s0;
    }

    function peg$parsecontainer() {
      var s0;

      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c269) {
        s0 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c270); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c271) {
          s0 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c272); }
        }
      }

      return s0;
    }

    function peg$parselarge() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c273) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c274); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c275) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c276); }
        }
      }

      return s0;
    }

    function peg$parsemedium() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c277) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c278); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c279) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c280); }
        }
      }

      return s0;
    }

    function peg$parsemini() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c281) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c282); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c283) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c284); }
        }
      }

      return s0;
    }

    function peg$parsesmall() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c285) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c286); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c287) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c288); }
        }
      }

      return s0;
    }

    function peg$parsecube() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c289) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c290); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c291) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c292); }
        }
      }

      return s0;
    }

    function peg$parsefillet() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c293) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c294); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c295) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c296); }
        }
      }

      return s0;
    }

    function peg$parsehead() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c297) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c298); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c299) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c300); }
        }
      }

      return s0;
    }

    function peg$parsejar() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c301) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c303) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c304); }
        }
      }

      return s0;
    }

    function peg$parsepackage() {
      var s0;

      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c305) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c307) {
          s0 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c308); }
        }
      }

      return s0;
    }

    function peg$parsepacket() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c309) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c310); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c311) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c312); }
        }
      }

      return s0;
    }

    function peg$parsepack() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c313) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c314); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c315) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c316); }
        }
      }

      return s0;
    }

    function peg$parsepatty() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c317) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c318); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c319) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c320); }
        }
      }

      return s0;
    }

    function peg$parsepiece() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c321) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c322); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c323) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c324); }
        }
      }

      return s0;
    }

    function peg$parseportion() {
      var s0;

      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c325) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c326); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c327) {
          s0 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c328); }
        }
      }

      return s0;
    }

    function peg$parseservings() {
      var s0;

      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c329) {
        s0 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c330); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c331) {
          s0 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c332); }
        }
      }

      return s0;
    }

    function peg$parseroll() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c333) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c334); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c335) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c336); }
        }
      }

      return s0;
    }

    function peg$parseslice() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c337) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c338); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c339) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c340); }
        }
      }

      return s0;
    }

    function peg$parsehandful() {
      var s0;

      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c341) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c342); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c343) {
          s0 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c344); }
        }
      }

      return s0;
    }

    function peg$parsepinch() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c345) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c346); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c347) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c348); }
        }
      }

      return s0;
    }

    function peg$parsetouch() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c349) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c350); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c351) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c352); }
        }
      }

      return s0;
    }

    function peg$parseslice() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c337) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c338); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c339) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c340); }
        }
      }

      return s0;
    }

    function peg$parseenvelope() {
      var s0;

      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c353) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c354); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c355) {
          s0 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c356); }
        }
      }

      return s0;
    }

    function peg$parsesprig() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c357) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c358); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c359) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c360); }
        }
      }

      return s0;
    }

    function peg$parsesheet() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c361) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c362); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c363) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c364); }
        }
      }

      return s0;
    }

    function peg$parsesplash() {
      var s0;

      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c365) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c366); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c367) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c368); }
        }
      }

      return s0;
    }

    function peg$parsedash() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c369) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c370); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c371) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c372); }
        }
      }

      return s0;
    }

    function peg$parseunit_() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c373) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c374); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c375) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c376); }
        }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
